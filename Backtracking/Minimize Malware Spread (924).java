class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int N = graph.length;
        int[] visited = new int[N];
        Arrays.fill(visited, -1);
        int[] color = new int[N];
        int[] count = new int[N];
        int idx = -1;
        int maxCount = 0;
        int minIdx = N;
        
        for (int i : initial) {
            count[i] = dfs(graph, i, i, visited);
            color[visited[i]]++;
        }
        
        for (int i : initial) {
            minIdx = Math.min(minIdx, i);
            
            if (color[i] == 1) {
                if (count[i] > maxCount || (count[i] == maxCount && i < idx)) {
                    idx = i;
                    maxCount = count[i];
                }
            }
        }
        
        return idx != -1 ? idx : minIdx;
    }
    
    private int dfs(int[][] graph, int i, int color, int[] visited) {
        if (visited[i] >= 0) {
            return 0;
        }
        
        visited[i] = color;
        int res = 1;
        
        for (int j = 0; j < graph[i].length; j++) {
            if (graph[i][j] == 1) {
                res += dfs(graph, j, color, visited);
            }
        }
        
        return res;
    }
}
