class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int N = graph.length;
        int[] count = new int[N];
        int idx = -1;
        int maxCount = 0;
        Set<Integer> set = new HashSet<>();

        for (int i : initial) {
            set.add(i);
        }
        
        for (int i : initial) {
            boolean[] visited = new boolean[N];
            visited[i] = true;
            count[i] = 1;
            
            for (int j = 0; j < graph[i].length; j++) {
                if (graph[i][j] == 1) {
                    int temp = dfs(graph, j, visited, set);
                    
                    if (temp > 0) {
                        count[i] += temp;
                    }
                }
            }
        }
        
        for (int i : initial) {
            if (count[i] > maxCount || (count[i] == maxCount && i < idx)) {
                idx = i;
                maxCount = count[i];
            }
        }
        
        return idx;
    }
    
    private int dfs(int[][] graph, int i, boolean[] visited, Set<Integer> set) {
        if (visited[i]) {
            return 0;
        }
        
        if (set.contains(i)) {
            return -1;
        }
        
        visited[i] = true;
        int res = 1;
        
        for (int j = 0; j < graph[i].length; j++) {
            if (graph[i][j] == 1) {
                int count = dfs(graph, j, visited, set);
                
                if (count == -1) {
                    set.add(i);
                    return -1;
                }
                
                res += count;
            }
        }
        
        return res;
    }
}
